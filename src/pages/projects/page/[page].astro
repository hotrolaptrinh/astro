---
import { getCollection } from "astro:content";
import Base from "../../../layouts/Base.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import ProjectCard from "../../../components/ProjectCard.astro";
import Pagination from "../../../components/Pagination.astro";
import BackToTop from "../../../components/BackToTop.astro";
import { PROJECTS_PER_PAGE } from "../../../consts";

export async function getStaticPaths() {
  const all = await getCollection("projects");
  const published = all.filter((p) => p.data.published);
  const totalPages = Math.max(1, Math.ceil(published.length / PROJECTS_PER_PAGE));
  return Array.from({ length: totalPages }, (_, i) => ({ params: { page: String(i + 1) } }));
}

// Data
const allProjects = await getCollection("projects");

// Filters (query used only for link state; SSG content is general)
const url = new URL(Astro.request.url);
const categoryParam = (url.searchParams.get("category") || "all").toLowerCase();
const tagParam = (url.searchParams.get("tag") || "all").toLowerCase();

// Build filter lists
const categories = Array.from(
  new Set(
    allProjects
      .map((p) => p.data.category)
      .filter((c): c is string => Boolean(c))
      .map((c) => c.toLowerCase())
  )
).sort();

const tags = Array.from(
  new Set(
    allProjects
      .flatMap((p) => p.data.tags || [])
      .filter((t): t is string => Boolean(t))
      .map((t) => t.toLowerCase())
  )
).sort();

// Filter + sort
let filtered = allProjects.filter((p) => p.data.published);
if (categoryParam !== "all") {
  filtered = filtered.filter(
    (p) => (p.data.category || "").toLowerCase() === categoryParam
  );
}
if (tagParam !== "all") {
  filtered = filtered.filter((p) =>
    (p.data.tags || []).map((t) => t.toLowerCase()).includes(tagParam)
  );
}
filtered = filtered.sort(
  (a, b) => b.data.date.getTime() - a.data.date.getTime()
);

// Pagination
const totalPages = Math.max(1, Math.ceil(filtered.length / PROJECTS_PER_PAGE));
const pageParam = Math.max(1, Number(Astro.params.page || 1));
const currentPage = Math.min(pageParam, totalPages);
const start = (currentPage - 1) * PROJECTS_PER_PAGE;
const pageItems = filtered.slice(start, start + PROJECTS_PER_PAGE);

// Preserve extra query for pagination links
const extraParams = new URLSearchParams();
if (categoryParam !== "all") extraParams.set("category", categoryParam);
if (tagParam !== "all") extraParams.set("tag", tagParam);
const extraQuery = extraParams.toString() ? `&${extraParams.toString()}` : "";
---
<Base title={`Dự án - Trang ${currentPage}`}>
  <Fragment slot="header"><Header /></Fragment>

  <section class="py-10 fade-in">
    <div class="flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between">
      <h1 class="text-2xl font-bold">Danh sách dự án</h1>

      <!-- Filters -->
      <form method="get" class="flex flex-wrap items-center gap-3">
        <label class="form-control w-40">
          <div class="label"><span class="label-text">Category</span></div>
          <select name="category" class="select select-bordered select-sm" value={categoryParam} onChange="this.form.submit()">
            <option value="all" selected={categoryParam === 'all'}>Tất cả</option>
            {categories.map((c) => (
              <option value={c} selected={categoryParam === c}>{c}</option>
            ))}
          </select>
        </label>

        <label class="form-control w-40">
          <div class="label"><span class="label-text">Tag</span></div>
          <select name="tag" class="select select-bordered select-sm" value={tagParam} onChange="this.form.submit()">
            <option value="all" selected={tagParam === 'all'}>Tất cả</option>
            {tags.map((t) => (
              <option value={t} selected={tagParam === t}>{t}</option>
            ))}
          </select>
        </label>
      </form>
    </div>

    <!-- Grid -->
    <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 mt-6">
      {pageItems.map((p) => (
        <a href={`${Astro.site?.pathname || '/'}projects/${p.slug}`}><ProjectCard {...p.data} /></a>
      ))}
    </div>

    <!-- Empty state -->
    {pageItems.length === 0 && (
      <div class="text-center text-base-content/70 py-16">Không có dự án phù hợp.</div>
    )}

    <!-- Pagination -->
    <Pagination page={currentPage} total={totalPages} extraQuery={extraQuery} usePath={true} basePath={`${Astro.site?.pathname || '/' }projects/`} />
  </section>

  <Fragment slot="footer">
    <BackToTop />
    <Footer />
  </Fragment>
</Base>
